// GENERATED FILE, DO NOT MODIFY! YOUR MODIFICATION WILL BE LOST!
package ${e.packageOfJavaDao};

import ${e.packageOfJavaModel}.${t.javaName};
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.JdbcUpdateAffectedIncorrectNumberOfRowsException;
import org.springframework.jdbc.core.RowCallbackHandler;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.simple.SimpleJdbcTemplate;
import org.springframework.stereotype.Repository;

/**
 * ${t.javaName}${e.daoPostfix}.
 * <br>${t.comment}
 * <br>Generated from ${t.dbName} database table.
 * <br>Created on: ${e.database.modelCreationDate}
 * <br>Database name: ${e.database.name}
 * <br>Generated by ${appname} v${appversion}
 */
@Repository
public class ${t.javaName}${e.daoPostfix} implements GenericDao, RowMapper<${t.javaName}> {

    static final protected String SELECTED_FIELDS = "<#list t.fieldList as field>${field.dbName}<#if field_has_next>, </#if></#list>";

    protected SimpleJdbcTemplate jdbcTemplate;

    @Autowired
    public void setDataSource(DataSource dataSource) {
        this.dataSource = dataSource;
        this.jdbcTemplate = new SimpleJdbcTemplate(dataSource);
    }

    /**
     * Load data by primary key(s).
    <#list t.fieldList as field>
        <#if field.primaryKey>
    * @param ${field.javaName} ${field.comment}
        </#if>
    </#list>
     * @return ${t.javaName} instance
     * @throws DataAccessException instance with the given pk(s) has not found.
     */
    @Override
    public ${t.javaName} get(<#list t.fieldList as field><#if field.primaryKey>${field.javaTypeAsString} ${field.javaName}<#if field_has_next>, </#if></#if></#list>) throws DataAccessException {
        String query = "select " + SELECTED_FIELDS + " from ${t.dbName} where <#list t.fieldList as field><#if field.primaryKey>${field.dbName}<#if field_has_next> = ? and </#if></#if></#list>";
        ${t.javaName} retVal = this.jdbcTemplate.queryForObject(query, this, <#list t.fieldList as field><#if field.primaryKey>${field.javaName}<#if field_has_next>, </#if></#if></#list>);
        return retVal;
    }
}
